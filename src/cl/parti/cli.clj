(ns cl.parti.cli
  (:use (cl.parti hsl))
  (:import java.awt.Color)
  (:use clojure.tools.cli))


; provide access to mosaic generation for various different tasks (this
; also demonstrates the functionality of the various modules):
; - as a web server, running on a particular port, which returns mosaic
;   images for the configured configuration (size, border, etc).
; - as a command line utility that generates a mosaic for a given input
;   value and configuration.
; - as a command line utility that checksums a file and gives a
;   standard image.

; a "style" is a combination of:
; - [n]umber of tiles
; - [s]ize of each tile (in pixels)
; - [c]olour of background
; - [w]idth of background (in pixels)
; - [k] complexity (by default, inferred from n)
; the program supports several "pre-packaged" styles.  only one can be
; given, and provides the default values for for the parameters above, which
; can be modified individually by providing specific values.

; default behaviour is to display the image generated by hashing the input.
; input can be either a list of files on the command line, or data from stdin.

(defn ?merge [map extra]
  (reduce (fn [map [k v]] (if (map k) map (assoc map k v)))
    map extra))

; note that this sets colour as rgb as components are over-ridden before
; conversion.
(defn set-style [options]
  (case (:style options)
    "hash" (?merge options
             {:tile-number 16 :tile-size 4
              :border-colour [0 0 0] :border-width 1})
    "user" (?merge options
             {:tile-number 5 :tile-size 20
              :border-colour [1 1 1] :border-width 3})
    :else options))

(defn assert-range [x mn mx name]
  (when (< x mn)
    (println (str name " below " mn))
    (System/exit 1))
  (when (> x mx)
    (println (str name " over " mx))
    (System/exit 1)))

(defn check-tile-number [options]
  (when-let [n (:tile-number options)]
    (assert-range n 4 32 "--tile-number"))
  options)

; from playing around, we know that:
; n=5 k>5 k=20 k<40
; n=16 k>10 k=40,100 k<150
; so we'll wildly extrapolate to k>n k=4n k<8n
; runs after style, so we know n is defined
(defn set-complexity [options]
  (let [n (:tile-number options)
        options (?merge options {:complexity (* 4 n)})
        k (:complexity options)]
    (do
      (assert-range k n (* 8 n) "--complexity")
      options)))

; this runs before anything else related to border-colour, so the value
; will be either nil or a colour name.  note that we set RGB here.
(defn lookup-colour [options]
  (if-let [name (:border-colour options)]
    (let [colour (.get (.getField Color name) nil)
          rgb [(.getRed colour) (.getGreen colour) (.getBlue colour)]]
      (assoc options :border-colour (map #(/ % 255) rgb)))
    options))

; this runs after style has provided defaults, so we know something is
; defined for the value
(defn pick-component [options name default]
  (if-let [value (name options)] value default))

(defn colour-components [options]
  (let [[r g b] (:border-colour options)
        r (pick-component options :border-red r)
        g (pick-component options :border-red g)
        b (pick-component options :border-red b)]
    (assoc options :border-colour (hsl [r g b]))))

(defn handle-args [args]
  (let [[options args banner] (cli args
    ["-n" "--tile-number" "Number of tiles"]
    ["-s" "--tile-size" "Number of pixels per tile"]
    ["-c" "--border-colour" "Border colour (white, black)"]
    ["-w" "--border-width" "Border width in pixels"]
    ["--border-red" "Border red component (0-255)"]
    ["--border-green" "Border green component (0-255)"]
    ["--border-blue" "Border blue component (0-255)"]
    ["-o" "--output" "File to which an image will be written"]
    ["-y" "--style" "A predefined style (hash, user)" :default "hash"]
    ["-p" "--http-port" "Run an HTTP server on this port"]
    ["--http-bind" "Bind an HTTP server to this address"]
    ["--http-cache" "Number of images to cache"]
    ["--http-param" "The HTTP parameter to be used as input"]
    ["--http-path" "The prefix stripped from the path"]
    ["-k" "--complexity" "The image complexity"]
    ["-x" "--hex" "Treat input as text hex hashes"]
    ["-h" "--help" "Display help" :flag true]
    )]
    (when (:help options)
      (println banner)
      (System/exit 0))
    (reduce (fn [o f] (f o)) options
      ; ordering below is critical!
      [check-tile-number
       lookup-colour set-style colour-components
       set-complexity])))
